void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/kronosnet/knet-ci-test.git"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

boolean getAuthCheck()
{
    branchEvent = currentBuild.getBuildCauses('jenkins.branch.BranchEventCause');
    cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause');

    echo "getAuthCheck. branchEvent = ${branchEvent}"
    echo "getAuthCheck. cause = ${cause}"
    echo "getAuthCheck. CHANGE_AUTHOR = ${env.CHANGE_AUTHOR}"


    if (branchEvent.size().equals(0)) {
	// Triggered internally
	return true;
    }
    // Caused by a github(etc) PR
    // Check users
    if ((env.CHANGE_AUTHOR == 'chrissie-c') ||
	(env.CHANGE_AUTHOR == 'fabbione')) {
	return true;
    }
    // TODO: input
    result = input(message: "Is this safe to run?", ok: "OK",
		   parameters: [
            [$class: 'ChoiceParameterDefinition',
             choices: ['no','yes'].join('\n'),
             name: 'input',
             description: 'Menu - select box option']
        ],
		   submitterParameter: 'submitter')
    is_ok = result
    echo "${is_ok} from ${submitter}"
    if (is_ok = "yes") {
	return true;
    } else {
	return false;
    }
}

def authcheck = getAuthCheck()

pipeline {
    parameters {
        string(name: 'NODES', defaultValue: 'fedora37', description: 'Set of nodes(labels) to run on')
    }
    agent {
	label params.NODES
    }

    stages {
	stage('Not allowed') {
	    when {
		expression { authcheck != true }
	    }
	    // Not really a failure, but I'm testing
	    stages {
		stage('notify') {
		    steps {
			sh "env"
			sh "echo authcheck: ${authcheck}"
			setBuildStatus("Build not run", "FAILURE");
		    }
		}
	    }
	}
	stage('Build and test') {
	    when {
		expression { authcheck == true }
	    }
	    stages {
                stage('Prep') {
                    steps {
			sh "env"
			sh "echo authcheck: ${authcheck}"
                        sh 'sh autogen.sh'
                        sh 'PKG_CONFIG_PATH=/srv/knet/origin/main/lib/pkgconfig/ ./configure'
                    }
                }
                stage('Build') {
                    steps {
			sh 'make all'
                    }
                }
                stage('Test') {
                    steps {
			sh 'make check'
                    }
                }
                stage('Dist Check') {
                    steps {
			sh 'make distcheck DISTCHECK_CONFIGURE_FLAGS="PKG_CONFIG_PATH=/srv/knet/origin/main/lib/pkgconfig/"'
                    }
                }
            }
	}
    }
}
