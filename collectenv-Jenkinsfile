def project='test'
def info=['project': project]



def runstuff(String agentName) {
    node("${agentName}") {
        stage("runstuff on ${agentName}") {
            echo "'runstuff'running on agent, ${agentName}"
	    dir ('test') {
		sh 'uname -a'
		sh 'printenv'
		shNoTrace('ls /', 'Redacted')
		a=getNodes('rh')
		println("CC: "+a)
		node('built-in') {
		    echo "now we are back on built-in"
		    sh 'uname -a'
		    sh 'printenv'
		}
		node('built-in') {
		    echo "now we are back on built-in AGAIN"
		    sh 'uname -a'
		    sh 'printenv'
		}
	    }
        }
    }
}


@NonCPS
def test1()
{
    def a=[:]
    return a
}

def test2()
{
    def a=[:]
    return a
}


// Builds up a map with all the nodes and the functions (steps) to call.
// Pass the returned map to 'parallel'
def collectenv(String label) {
    def nodeList = getNodes(label)
    collectBuildEnv = [:]


    def t1 = test1()
    def t2 = test2()
    println('CC: type of t1 is'+t1.getClass())
    println('CC: type of t2 is'+t2.getClass())

    
    for(i=0; i<nodeList.size(); i++) {
        def agentName = nodeList[i]

        // skip the null entries in the nodeList
        if (agentName != null) {
            collectBuildEnv["node_" + agentName] = {
                runstuff(agentName)
            }
        }
    }
    return collectBuildEnv
}

def callThing()
{
    println("not so quiet now")
}

pipeline {
    agent {
        label "built-in"
    }
        
    options {
	// We do our own checkouts
	skipDefaultCheckout(true)
    }
        
    stages {
	stage('do quiet thing') {
	    steps {
		callThing()
	    }
	}
        stage('Do things') {
            
            steps {
                script {
//		    getSCM()
		    envname='ZZTESTENV'
		    withEnv(["${envname}='grot'"]) {
			sh 'env|sort'
		    }
		    echo '----------------------------------'
		    rh_env = collectenv('rh')
		    deb_env = collectenv('deb')

		    parallel rh_env + deb_env

		    println(info)
                }
            }
        }
    }
}
