def project='test'
def info=['project': project]

def runstuff(String agentName) {
    node("${agentName}") {
        stage("runstuff on ${agentName}") {
            echo "'runstuff'running on agent, ${agentName}"
	    updateLabels()
	    dir ('test') {
//		getSCM()
		sh 'uname -a'
		sh 'printenv'
		shNoTrace('ls /', 'ls-redacted')
		a=getNodes('rh')
		println("CC: "+a)
		node('built-in') {
		    echo "now we are back on built-in"
		    sh 'uname -a'
		    sh 'printenv'
		}
		node('built-in') {
		    echo "now we are back on built-in AGAIN"
		    sh 'uname -a'
		    sh 'printenv'
		}
	    }
        }
    }
}

def runstuff2(String agentName) {
    node("${agentName}") {
        stage("runstuff2 on ${agentName}") {
	    dir ('test2') {
		updateLabels()
//		getSCM()
		echo "'runstuff2' running on agent, ${agentName}"
		sh 'uname -a'
		sh 'printenv'
	    }
        }
    }
}



// Builds up a map with all the nodes and the functions (steps) to call.
// Pass the returned map to 'parallel'
def collectenv(String label, Closure stepfunc) {
    def nodeList = getNodes(label)
    collectBuildEnv = [:]

    for(i=0; i<nodeList.size(); i++) {
        def agentName = nodeList[i]

        // skip the null entries in the nodeList
        if (agentName != null) {
            collectBuildEnv["node_" + agentName] = {
                stepfunc(agentName)
            }
        }
    }
    return collectBuildEnv
}


pipeline {
    agent {
        label "built-in"
    }
        
    options {
	// We do our own checkouts
	skipDefaultCheckout(true)
    }
        
    stages {
        stage('Do things') {
            
            steps {
                script {
//		    getSCM()
		    envname='ZZTESTENV'
		    withEnv(["${envname}='grot'"]) {
			sh 'env|sort'
		    }
		    echo '----------------------------------'
		    rh_env = collectenv('rh', this.&runstuff2)
		    deb_env = collectenv('deb', this.&runstuff)

		    parallel rh_env + deb_env

		    println(info)
                }
            }
        }
    }
}
