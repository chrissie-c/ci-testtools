def project='test'
def info=['project': project]

def runstuff(String agentName) {
    node("${agentName}") {
        stage("runstuff on ${agentName}") {
            echo "'runstuff'running on agent, ${agentName}"
	    dir ('test') {
		sh 'uname -a'
		sh 'printenv'
		shNoTrace('ls /', 'Redacted')
		a=getNodes('rh')
		println("CC: "+a)
		node('built-in') {
		    echo "now we are back on built-in"
		    sh 'uname -a'
		    sh 'printenv'
		}
		node('built-in') {
		    echo "now we are back on built-in AGAIN"
		    sh 'uname -a'
		    sh 'printenv'
		}
	    }
        }
    }
}

// Builds up a map with all the nodes and the functions (steps) to call.
// Pass the returned map to 'parallel'
def collectenv(String label) {
    def nodeList = getNodes(label)
    collectBuildEnv = [:]

    for(i=0; i<nodeList.size(); i++) {
        def agentName = nodeList[i]

        // skip the null entries in the nodeList
        if (agentName != null) {
            collectBuildEnv["node_" + agentName] = {
                runstuff(agentName)
            }
        }
    }
    return collectBuildEnv
}

def callThing()
{
    println("not so quiet now")
}

pipeline {
    agent {
        label "rhel"
    }

    tools {
	jfrog 'jfrog'
    }
//    options {
	// We do our own checkouts
//	skipDefaultCheckout(true)
//    }

    stages {
        stage('Do things') {

            steps {
                script {
		    sh "echo ${currentJob}"
		    sh "env"
		    sh "echo 2.0-test > .tarball-version"
		    sh "sh autogen.sh && ./configure"
		    sh "make rpm"
		    jf 'rt upload *.rpm conan-local/libqb/'
                }
            }
        }
    }
}
