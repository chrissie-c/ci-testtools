// Jenkinsfile for the knet-ci-test/main project
// 27-Apr-2023    Chrissie Caulfield    original version
//

@Library('ProjectLib@devel') _
// Globals
def authcheck = false
def voting_fail = 0
def nonvoting_fail = 0

pipeline {
    // Use the matrix
    agent none

    // Params that can be overridden at run-time
    parameters {
        string(name: 'TIMEOUT', defaultValue: '60', description: 'Job timeout (in minutes)')
    }
    options {
	timeout(time: params.TIMEOUT as int, unit: 'MINUTES')
	timestamps()
    }

    stages {
	// First check we are allowed to run
	stage('Check user') {
	    steps {
		// Run this on the Jenkins host
		node('nobuild') {
		    script {
			authcheck = getAuthCheck()
		    }
		}
	    }
	}

	// This is the main stage that covers everything
	stage('Build and test') {
	    when {
		// getAuthCheck will usually abort the job if permission is denied
		// but this is an extra check!
		expression { authcheck == true }
	    }

	    // Matrix of nodes/runs to do.
	    // Watch the excludes carefully
	    matrix {
		agent {
		    label "${PLATFORM}"
		}
		axes {
		    axis {
			name 'PLATFORM'
			values <<PLATFORMS>>
		    }
		    axis {
			name 'FUNCTION'
			values <<FUNCTIONS>>
		    }
		}
		excludes {
		    exclude {
			axis {
			    name 'PLATFORM'
			    values <<EXCLUDES-nonvoting>>
			}
			axis {
			    name 'FUNCTION'
			    values 'nonvoting'
			}
		    }
		    exclude {
			axis {
			    name 'PLATFORM'
			    values <<EXCLUDES-staticcheck>>
			}
			axis {
			    name 'FUNCTION'
			    values 'staticcheck'
			}
		    }
		    exclude {
			axis {
			    name 'PLATFORM'
			    values <<EXCLUDES-voting>>
			}
			axis {
			    name 'FUNCTION'
			    values 'voting'
			}
		    }
		}
		// All of the stages that actually do stuff
		stages {
		    // Prepare the checkout for building (autogen/configure etc)
                    stage('Prep') {
			steps {
			    script {
				try {
				    runPrep()
				} catch (err) {
				    if (FUNCTION == "voting" ) {
					throw err
				    }
				    echo "Error in Prep stage for non-voting job: $err"
				    nonvoting_fail++
				}
			    }
			}
		    }
		    // Do the compilation stage(s) (eg make all)
                    stage('Build') {
			steps {
			    script {
				try {
				    runBuild()
				} catch (err) {
				    if (FUNCTION == "voting" ) {
					throw err
				    }
				    echo "Error in Build stage for non-voting job: $err"
				    nonvoting_fail++
				}
			    }
			}
                    }
		    // Run tests (eg make check)
                    stage('Test') {
			steps {
			    script {
				try {
				    runCheck()
				} catch (err) {
				    if (FUNCTION == "voting" ) {
					voting_fail++
					throw err
				    }
				    echo "Error in Test stage for non-voting job: $err"
				    nonvoting_fail++
				}
			    }
			}
                    }
		    // Run any distribution tests (eg distcheck, rpm etc)
                    stage('Dist') {
			steps {
			    script {
				try {
				    runDist()
				} catch (err) {
				    if (FUNCTION == "voting" ) {
					voting_fail++
					throw err
				    }
				    echo "Error in Dist stage for non-voting job: $err"
				    nonvoting_fail++
				}
			    }
			}
                    }
		    // Static checkers (eg coverity). These are always "voting"
		    stage('Static check') {
			when {
			    expression { FUNCTION == "staticcheck" }
			}
			steps {
			    runStaticCheck()
			}
		    }
		}
	    }
	}
    }

    // When finished, check things
    post {
	always {
	    // Run this on the Jenkins host
	    node('nobuild') {
		// Notify interested users if non-voting jobs fail
		script {
		    postFunctions(["nonvotingfail": nonvoting_fail, "voting_fail": voting_fail])
		}
	    }
	}
    }
}
